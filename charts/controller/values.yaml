imageOrg: "drycc"
imagePullPolicy: "Always"
imageTag: "canary"
imageRegistry: "registry.drycc.cc"
## Enable diagnostic mode
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers
  ##
  command:
    - sleep
  ## @param diagnosticMode.args Args to override all containers
  ##
  args:
    - infinity
# A comma-separated list of URLs to send app release information to
# See https://www.drycc.cc/managing-workflow/deploy-hooks/
deployHookUrls: ""
timezone: "UTC"
# limitsCpu: "100m"
# limitsMemory: "50Mi"
# Possible values are:
# enabled - allows for open registration
# disabled - turns off open registration
# admin_only - allows for registration by an admin only.
registrationMode: "admin_only"
# Option to disable ssl verification to connect to k8s api server
k8sApiVerifyTls: "true"
# Set app image pull policy
appImagePullPolicy: "Always"
# Filer settings image and image pull policy
filerImage: "registry.drycc.cc/drycc/filer:canary"
filerImagePullPolicy: "Always"
# Set storageClassName. It is used for application.
appStorageClass: "{{ .Values.storage.csi.storageClassName }}"
# Set runtimeClassName. It is used for application.
appRuntimeClass: ""
# Set appDNSPolicy. It is used for application.
# See: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
appDNSPolicy: ""
# set timeout seconds. It is used for pod exec
appPodExecTimeout: 3600
# Set api replicas
apiReplicas: 1
# Set celery replicas
celeryReplicas: 1
# Set mutate replicas
mutateReplicas: 1
# Set cronjob concurrencyPolicy
# Allow (default): The cron job allows concurrently running jobs
# Forbid: The cron job does not allow concurrent runs; if it is time for a new job run and the previous job run hasn't finished yet, the cron job skips the new job run
# Replace: If it is time for a new job run and the previous job run hasn't finished yet, the cron job replaces the currently running job run with a new job run
concurrencyPolicy: "Replace"
# databaseUrl and databaseReplicaUrl are will no longer use the built-in database component
databaseUrl: ""
databaseReplicaUrl: ""
# The passportUrl, passportKey and passportSecret are will no longer use the built-in passport component
passportUrl: ""
passportKey: ""
passportSecret: ""
# Workflow-manager Configuration Options
workflowManagerUrl: ""
workflowManagerAccessKey: ""
workflowManagerSecretKey: ""

# Configuring this will no longer use the built-in rabbitmq component
rabbitmqUrl: ""

# limit specs, plans config
config:
  metrics: ""
  limitSpecs: ""
  limitPlans: ""

# Service
service:
  # Provide any additional service annotations
  annotations: {}

# Any custom controller environment variables
# can be specified as key-value pairs under environment
# this is usually a non required setting.
environment:
  RESERVED_NAMES: "drycc, drycc-builder, drycc-grafana, drycc-passport, drycc-helmbroker, drycc-manager"

api:
  nodeAffinityPreset:
    key: "drycc.cc/node"
    type: "soft"
    values:
    - "true"
  podAffinityPreset:
    type: ""
    extraMatchLabels:
      security: "drycc-security"
  podAntiAffinityPreset:
    type: "soft"
    extraMatchLabels:
      app: "drycc-controller-api"

celery:
  nodeAffinityPreset:
    key: "drycc.cc/node"
    type: "soft"
    values:
    - "true"
  podAffinityPreset:
    type: ""
    extraMatchLabels:
      security: "drycc-security"
  podAntiAffinityPreset:
    type: "soft"
    extraMatchLabels:
      app: "drycc-controller-celery"

mutate:
  nodeAffinityPreset:
    key: "drycc.cc/node"
    type: "soft"
    values:
    - "true"
  podAffinityPreset:
    type: ""
    extraMatchLabels:
      security: "drycc-security"
  podAntiAffinityPreset:
    type: "soft"
    extraMatchLabels:
      component: "drycc-controller-mutate"

redis:
  replicas: 1

storage:
  csi:
    storageClassName: drycc-storage

global:
  # Admin email, used for each component to send email to administrator
  email: "drycc@drycc.cc"
  # Set the storage backend
  #
  # Valid values are:
  # - s3: Store persistent data in AWS S3 (configure in S3 section)
  # - azure: Store persistent data in Azure's object storage
  # - gcs: Store persistent data in Google Cloud Storage
  # - minio: Store persistent data on in-cluster Minio server
  storage: minio
  # Set the location of Workflow's PostgreSQL database
  #
  # Valid values are:
  # - on-cluster: Run PostgreSQL within the Kubernetes cluster (credentials are generated
  #   automatically; backups are sent to object storage
  #   configured above)
  # - off-cluster: Run PostgreSQL outside the Kubernetes cluster (configure in database section)
  databaseLocation: "on-cluster"

  # Set the location of Workflow's Registry
  #
  # Valid values are:
  # - on-cluster: Run registry within the Kubernetes cluster
  # - off-cluster: Use registry outside the Kubernetes cluster (example: drycc registry,self-hosted)
  registryLocation: "on-cluster"
  # The host port to which registry proxy binds to
  registryProxyPort: 5555
  # Prefix for the imagepull secret created when using private registry
  registrySecretPrefix: "private-registry"
  # Role-Based Access Control for Kubernetes >= 1.5
  rbac: false
  # GatewayClass is cluster-scoped resource defined by the infrastructure provider.
  gatewayClass: ""
  # Please check `kubernetes.io/ingress.class`
  ingressClass: ""
  # A domain name consists of one or more parts.
  # Periods (.) are used to separate these parts.
  # Each part must be 1 to 63 characters in length and can contain lowercase letters, digits, and hyphens (-).
  # It must start and end with a lowercase letter or digit.
  clusterDomain: "cluster.local"
  # The public resolvable hostname to build your cluster with.
  #
  # This will be the hostname that is used to build endpoints such as "drycc.$HOSTNAME"
  platformDomain: ""
  # Whether cert_manager is enabled to automatically generate controller certificates
  certManagerEnabled: true
  passportLocation: "on-cluster"
